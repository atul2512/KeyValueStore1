package main;

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintStream.*;
import java.util.*;

public class KeyValueStoreSimulator {
	
	public static ArrayList<Integer> arr=new ArrayList<Integer>();
	public static int firstNodePort;
	public static int index=0;
	
	public static int getRandomPort(){
		
		return arr.get(index++);
		
	}
	
	public static void join(int port){
		OurRMI ourRMI = null;
		if(index==1){
			ourRMI = new OurRMI(port, "join"+":5623"+":"+":");
			ourRMI.result();
		}
		else{
			ourRMI = new OurRMI(port, "join:"+firstNodePort+":"+":");
			ourRMI.result();
		}
	}
	
	public static void insertKey(String key, String value){
		OurRMI ourRMI = null;
		ourRMI = new OurRMI(firstNodePort, "findKeySuccessor: "+ key+" "+value+" "+"insert");
		System.out.println(ourRMI.result());
	}
	
	public static String play(String key){
		OurRMI ourRMI = new OurRMI(firstNodePort, "findKeySuccessor: "+ key+" deadbeef"+" "+"retrieve");
		return ourRMI.result();
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ArrayList<PeerNode> peers = new ArrayList<PeerNode>();
		for(int i=5000;i<6500;i++)
			arr.add(i);
		Collections.shuffle(arr);
		firstNodePort = arr.get(0);
		
		
		
//		for(int j=0;j<5;j++){
//			System.out.println(getRandomPort());
//		}
	}

}
